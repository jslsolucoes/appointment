id: 'createNewAppointmentDate'
type: 'node'
before:
   - type: 'ml-classifier'
     classify: >
                 (js) -> return context.issueCase;
     putOnContextAs: 'issueCaseClassification'
     models:
        - 'helpDeskNaiveBayesModel'
        - 'helpDeskDeepLearningModel'
     onDisagree: 'helpDeskNaiveBayesModel'
   - type: 'http-request'
     method: 'get'
     url: > 
            (js)=> return `http://localhost:8081/scheduleSlots`;
     putOnContextAs: 'availableSlots'
components:
   
   -  type: 'text'
      text: > 
               (js) => if(context.issueCaseClassification === 'hardware') {
                           return 'Seu problema aparentemente está relacionado a algum problema de hardware';
                       } else if(context.issueCaseClassification === 'software') {
                          return 'Seu problema aparentemente está relacionado a algum problema de sofware';
                       } else {
                          return 'Seu problema aparentemente está relacionado a algum problema predial';
                       }
                       
   -  type: 'dialog'
      of: 'info'
      text: > 
               (js) -> return `Não foram encontrados dias disponíveis para agendamento`;
      title: 'Erro'
      rendered: > 
                  (js) -> return context.availableSlots.statusCode !== 200;
   
   -  type: 'button-group'
      putOnContextAs: 'idScheduleSlot'
      text: 'Por favor, escolha um dia para a visita de um técnico.'
      required: true
      rendered: > 
                  (js) -> return context.availableSlots.statusCode === 200;
      map: >
                 (js) -> return context.availableSlots.body.map((scheduleSlot) => {
                    return  {
                       value: scheduleSlot.idSchedule,
                       text: new Date(scheduleSlot.date).toLocaleDateString('pt-BR'),
                       order: 1000,
                       type: 'button'
                    }
                 });
      value: >
            (js) => if(context.exists('idScheduleSlot')) {
                        return context.idScheduleSlot;
                     } else {
                        return '';
                     }        
hasNext: true
next: 'createNewAppointmentTime'
hasPrevious: true
previous: 'describeIssue'